#!/bin/bash

# --------------------------------------------
# Bug Bounty Recon Framework
# Author: Inayat Hussain (Security Researcher)
# --------------------------------------------

GREEN="\033[1;32m"
YELLOW="\033[1;33m"
RED="\033[1;31m"
CYAN="\033[1;36m"
RESET="\033[0m"

BANNER() {
    echo -e "${GREEN}"
    echo "╔══════════════════════════════════════════════════╗"
    echo "║     Bug Bounty Recon Framework                   ║"
    echo "║     Author: Inayat Hussain (Security Researcher) ║"
    echo "╚══════════════════════════════════════════════════╝"
    echo -e "${RESET}"
}

install_if_missing() {
    if ! command -v "$1" &> /dev/null; then
        echo -e "${YELLOW}[+] Installing $1...${RESET}"
        go install "$2@latest"
        export PATH=$PATH:$(go env GOPATH)/bin
    else
        echo -e "${GREEN}[-] $1 already installed.${RESET}"
    fi
}

setup_tools() {
    echo -e "${CYAN}[*] Checking and installing required tools...${RESET}"
    if ! command -v go &> /dev/null; then
        echo -e "${RED}[!] Go is not installed. Please install Go (https://go.dev/doc/install) and try again.${RESET}"
        exit 1
    fi
    install_if_missing waybackurls github.com/tomnomnom/waybackurls
    install_if_missing gau github.com/lc/gau
    install_if_missing gf github.com/tomnomnom/gf
    install_if_missing qsreplace github.com/tomnomnom/qsreplace
    install_if_missing httpx github.com/projectdiscovery/httpx/cmd/httpx
    install_if_missing nuclei github.com/projectdiscovery/nuclei/v2/cmd/nuclei
    install_if_missing dalfox github.com/hahwul/dalfox/v2

    if [ ! -d "$HOME/.gf" ]; then
        echo -e "${YELLOW}[+] Cloning GF patterns...${RESET}"
        git clone https://github.com/1ndianl33t/Gf-Patterns "$HOME/.gf"
    fi
}

collect_urls() {
    echo -e "${CYAN}[*] Collecting URLs for $DOMAIN...${RESET}"
    waybackurls "$DOMAIN" > "$OUTDIR/wayback.txt"
    gau "$DOMAIN" > "$OUTDIR/gau.txt"
    cat "$OUTDIR/wayback.txt" "$OUTDIR/gau.txt" | sort -u | grep "=" > "$OUTDIR/params.txt"
    echo -e "${GREEN}[+] Found $(wc -l < "$OUTDIR/params.txt") parameterized URLs.${RESET}"
}

run_gf_scans() {
    echo -e "${CYAN}[*] Scanning with GF patterns...${RESET}"
    declare -A vulns=(
        ["XSS"]="xss"
        ["SQLi"]="sqli"
        ["SSRF"]="ssrf"
        ["LFI"]="lfi"
        ["RCE"]="rce"
        ["IDOR"]="idor"
        ["Open Redirect"]="redirect"
    )
    for vuln in "${!vulns[@]}"; do
        pattern="${vulns[$vuln]}"
        gf "$pattern" < "$OUTDIR/params.txt" > "$OUTDIR/$pattern.txt"
        count=$(wc -l < "$OUTDIR/$pattern.txt")
        if [ "$count" -gt 0 ]; then
            echo -e "${RED}[!] $vuln: $count possible findings (saved to $OUTDIR/$pattern.txt)${RESET}"
        else
            rm "$OUTDIR/$pattern.txt" 2>/dev/null
        fi
    done
}

run_active_scans() {
    echo -e "${CYAN}[*] Running httpx for live host detection...${RESET}"
    httpx -l "$OUTDIR/params.txt" -silent -o "$OUTDIR/live.txt"

    echo -e "${CYAN}[*] Running nuclei on live URLs...${RESET}"
    nuclei -l "$OUTDIR/live.txt" -o "$OUTDIR/nuclei-results.txt"

    echo -e "${CYAN}[*] Running dalfox for XSS scanning...${RESET}"
    dalfox file "$OUTDIR/params.txt" -o "$OUTDIR/dalfox-xss.txt"
}

run_shodan_scan() {
    if command -v shodan &>/dev/null; then
        echo -e "${CYAN}[*] Running Shodan scan (requires API key)...${RESET}"
        IP=$(dig +short "$DOMAIN" | head -n 1)
        shodan host "$IP" > "$OUTDIR/shodan.txt"
    else
        echo -e "${YELLOW}[!] Shodan CLI not found. Skipping Shodan scan.${RESET}"
    fi
}

run_amass() {
    if command -v amass &>/dev/null; then
        echo -e "${CYAN}[*] Running Amass subdomain enumeration...${RESET}"
        amass enum -d "$DOMAIN" -o "$OUTDIR/amass.txt"
    else
        echo -e "${YELLOW}[!] Amass not found. Skipping subdomain enumeration.${RESET}"
    fi
}

main_menu() {
    echo ""
    echo -e "${CYAN}Choose scan type:${RESET}"
    echo "1. Passive Recon Only"
    echo "2. Passive + GF Pattern Scan"
    echo "3. Full Scan (Active Tools + GF + Shodan/Amass)"
    echo "4. Exit"
    read -p "Select an option: " choice

    case $choice in
        1) collect_urls ;;
        2) collect_urls; run_gf_scans ;;
        3) collect_urls; run_gf_scans; run_active_scans; run_amass; run_shodan_scan ;;
        4) exit 0 ;;
        *) echo "Invalid choice"; exit 1 ;;
    esac
}

# === MAIN EXECUTION ===
BANNER
setup_tools

while getopts d: flag; do
  case "${flag}" in
    d) DOMAIN=${OPTARG};;
  esac
done

if [ -z "$DOMAIN" ]; then
    read -p "Enter target domain (e.g., example.com): " DOMAIN
fi

OUTDIR="output/$DOMAIN"
mkdir -p "$OUTDIR"

main_menu

echo -e "${GREEN}[✓] Recon complete! Results saved in: $OUTDIR${RESET}"

